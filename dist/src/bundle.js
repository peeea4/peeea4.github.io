let btns=Array.from(document.querySelectorAll(".show-text")),btnsTry=(btns.forEach(t=>{t.addEventListener("click",()=>{t.classList.toggle("active");let e=t.nextElementSibling;e.style.maxHeight?e.style.maxHeight=null:e.style.maxHeight=e.scrollHeight+"px"})}),Array.from(document.querySelectorAll(".btn")));btnsTry.forEach(e=>{e.classList.contains("try")?e.addEventListener("click",()=>{document.location.href="/index.html#compare"}):e.classList.contains("example")&&e.addEventListener("click",()=>{document.location.href="/index.html#tutorial"})});const HLTV=require("E:Front-endpeeea4.github.io\node_moduleshltv-apidistindex.js").default,express=require("express"),app=express();console.log(HLTV),app.get("/",async(e,t)=>{var s=await HLTV.getNews();t.json(s),console.log(s,t)});
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.MAPS=exports.CONFIG=void 0,exports.CONFIG={BASE:"https://www.hltv.org",CDN:"https://img-cdn.hltv.org",RSS:"rss",RESULTS:"results",MATCHES:"matches",PLAYERS:"stats/players",TEAMS:"ranking/teams",TEAM:"team"},exports.MAPS={trn:"Train",mrg:"Mirage",d2:"Dust 2",inf:"Inferno",vtg:"Vertigo",ovp:"Overpass",nuke:"Nuke"};
"use strict";var __awaiter=this&&this.__awaiter||function(e,i,_,n){return new(_=_||Promise)(function(r,t){function a(e){try{u(n.next(e))}catch(e){t(e)}}function s(e){try{u(n.throw(e))}catch(e){t(e)}}function u(e){var t;e.done?r(e.value):((t=e.value)instanceof _?t:new _(function(e){e(t)})).then(a,s)}u((n=n.apply(e,i||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const match_1=require("./match"),matches_1=require("./matches"),results_1=require("./results"),players_1=require("./players"),player_1=require("./player"),teams_1=require("./teams"),team_1=require("./team"),rss_1=__importDefault(require("./rss"));exports.default={getNews:()=>__awaiter(void 0,void 0,void 0,function*(){return rss_1.default("news")}),getResults:results_1.getResults,getMatchById:match_1.getMatchById,getMatches:matches_1.getMatches,getTopPlayers:players_1.getTopPlayers,getPlayerById:player_1.getPlayerById,getTopTeams:teams_1.getTopTeams,getTeamById:team_1.getTeamById};
"use strict";var __awaiter=this&&this.__awaiter||function(t,s,d,o){return new(d=d||Promise)(function(a,e){function r(t){try{i(o.next(t))}catch(t){e(t)}}function n(t){try{i(o.throw(t))}catch(t){e(t)}}function i(t){var e;t.done?a(t.value):((e=t.value)instanceof d?e:new d(function(t){t(e)})).then(r,n)}i((o=o.apply(t,s||[])).next())})},__importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStatsByMatchId=void 0;const cheerio_1=__importDefault(require("cheerio")),node_fetch_1=__importDefault(require("node-fetch")),config_1=require("./config");function getStatsByMatchId(l){return __awaiter(this,void 0,void 0,function*(){var t=`${config_1.CONFIG.BASE}/${config_1.CONFIG.MATCHES}/${l}/_`;try{var e=yield(yield node_fetch_1.default(t,{headers:{"User-Agent":"node-fetch"}})).text();const r=cheerio_1.default.load(e,{normalizeWhitespace:!0}),n=[],a=r(".matchstats").find("#all-content"),i=a.children("table.totalstats").first().children("tbody"),s=i.children("tr").not(".header-row"),d=(s.each((t,e)=>{const a=r(e);e={playerName:a.find(".players .gtSmartphone-only").text().replace(/'/g,""),playerId:a.find(".players").find("a").attr("href"),kills:parseInt(a.find("td.kd").text().split("-")[0],10),deaths:parseInt(a.find("td.kd").text().split("-")[1],10),plusMinus:parseInt(a.find("td.plus-minus").text(),10),adr:parseFloat(a.find("td.adr").text()),kast:parseFloat(a.find("td.kast").text()),rating:parseFloat(a.find("td.rating").text())};n.push(e)}),a.children("table.totalstats").last().children("tbody")),o=d.children("tr").not(".header-row");if(o.each((t,e)=>{const a=r(e);e={playerName:a.find(".players .gtSmartphone-only").text().replace(/'/g,""),playerId:a.find(".players").find("a").attr("href"),kills:parseInt(a.find("td.kd").text().split("-")[0],10),deaths:parseInt(a.find("td.kd").text().split("-")[1],10),plusMinus:parseInt(a.find("td.plus-minus").text(),10),adr:parseFloat(a.find("td.adr").text()),kast:parseFloat(a.find("td.kast").text()),rating:parseFloat(a.find("td.rating").text())};n.push(e)}),n.length)return n;throw new Error("Something went wrong, here is no stats found for this match. Please create an issue in this repository https://github.com/dajk/hltv-api")}catch(t){throw new Error(t)}})}exports.getStatsByMatchId=getStatsByMatchId;
"use strict";var __awaiter=this&&this.__awaiter||function(t,s,d,l){return new(d=d||Promise)(function(r,e){function n(t){try{i(l.next(t))}catch(t){e(t)}}function a(t){try{i(l.throw(t))}catch(t){e(t)}}function i(t){var e;t.done?r(t.value):((e=t.value)instanceof d?e:new d(function(t){t(e)})).then(n,a)}i((l=l.apply(t,s||[])).next())})},__importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getMatchById=void 0;const cheerio_1=__importDefault(require("cheerio")),node_fetch_1=__importDefault(require("node-fetch")),config_1=require("./config");function getMatchById(y){var v,k;return __awaiter(this,void 0,void 0,function*(){var t=`${config_1.CONFIG.BASE}/${config_1.CONFIG.MATCHES}/${y}/_`;try{var e=yield(yield node_fetch_1.default(t,{headers:{"User-Agent":"node-fetch"}})).text();const s=cheerio_1.default.load(e,{normalizeWhitespace:!0}),d=[],l=[],o=s(".matchstats").find("#all-content"),c=o.children("table.totalstats").first().children("tbody"),f=c.children("tr").not(".header-row"),h=(f.each((t,e)=>{const r=s(e),n=r.find(".players .gtSmartphone-only");var e=n.text().replace(/'\w+' /,""),a=n.find(".player-nick").text(),e={name:e,id:Number(null==(e=r.find(".players").find("a").attr("href"))?void 0:e.split("/")[2]),nickname:a,kills:parseInt(r.find("td.kd").text().split("-")[0],10),deaths:parseInt(r.find("td.kd").text().split("-")[1],10),adr:parseFloat(r.find("td.adr").text()),kast:parseFloat(r.find("td.kast").text()),rating:parseFloat(r.find("td.rating").text())};d.push(e)}),o.children("table.totalstats").last().children("tbody")),u=h.children("tr").not(".header-row");if(u.each((t,e)=>{const r=s(e),n=r.find(".players .gtSmartphone-only");var e=n.find(".player-nick").text(),a=(n.find(".player-nick").remove(),n.text().replace("''","")),e={name:a,nickname:e,id:Number(null==(a=r.find(".players").find("a").attr("href"))?void 0:a.split("/")[2]),kills:parseInt(r.find("td.kd").text().split("-")[0],10),deaths:parseInt(r.find("td.kd").text().split("-")[1],10),adr:parseFloat(r.find("td.adr").text()),kast:parseFloat(r.find("td.kast").text()),rating:parseFloat(r.find("td.rating").text())};l.push(e)}),!d.length||!l.length)throw new Error("Something went wrong, here is no correct stats found for this match. Please create an issue in this repository https://github.com/dajk/hltv-api");const m=s(".mapholder"),p=[],x=(m.each((t,e)=>{const r=s(e);var e={name:r.find(".results-left").find(".results-teamname").text(),result:{first:{side:r.find(".results-center-half-score").children().eq(1).attr("class"),rounds:Number(r.find(".results-center-half-score").children().eq(1).text())},second:{side:r.find(".results-center-half-score").children().eq(5).attr("class"),rounds:Number(r.find(".results-center-half-score").children().eq(5).text())},ext:Number(r.find(".results-center-half-score").children().eq(11).text())}},n={name:r.find(".results-right").find(".results-teamname").text(),result:{first:{side:r.find(".results-center-half-score").children().eq(3).attr("class"),rounds:Number(r.find(".results-center-half-score").children().eq(3).text())},second:{side:r.find(".results-center-half-score").children().eq(7).attr("class"),rounds:Number(r.find(".results-center-half-score").children().eq(7).text())},ext:Number(r.find(".results-center-half-score").children().eq(13).text())}};p.push({name:r.find(".mapname").text(),pick:r.find(".pick").find(".results-teamname").text(),teams:[e,n]})}),s(".timeAndEvent"));var r=new Date(x.find(".time").data("unix")).toISOString(),n={name:x.find(".event").find("a").text(),logo:""};const g=s(".teamsBox").children(".team").eq(0),_=s(".teamsBox").children(".team").eq(1);var a={name:g.find(".teamName").text(),logo:null!=(v=g.find(".logo").attr("src"))&&v.includes("https")?g.find(".logo").attr("src"):""+config_1.CONFIG.BASE+g.find(".logo").attr("src"),result:Number(g.find(".team1-gradient").children().last().text()),players:d},i={name:_.find(".teamName").text(),logo:null!=(k=_.find(".logo").attr("src"))&&k.includes("https")?_.find(".logo").attr("src"):""+config_1.CONFIG.BASE+_.find(".logo").attr("src"),result:Number(_.find(".team2-gradient").children().last().text()),players:l};return{id:Number(y),time:r,event:n,teams:[a,i],maps:p}}catch(t){throw new Error(t)}})}exports.getMatchById=getMatchById;
"use strict";var __awaiter=this&&this.__awaiter||function(t,o,c,h){return new(c=c||Promise)(function(a,e){function n(t){try{i(h.next(t))}catch(t){e(t)}}function r(t){try{i(h.throw(t))}catch(t){e(t)}}function i(t){var e;t.done?a(t.value):((e=t.value)instanceof c?e:new c(function(t){t(e)})).then(n,r)}i((h=h.apply(t,o||[])).next())})},__importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getMatches=void 0;const cheerio_1=__importDefault(require("cheerio")),node_fetch_1=__importDefault(require("node-fetch")),config_1=require("./config");function getMatches(){return __awaiter(this,void 0,void 0,function*(){var t=config_1.CONFIG.BASE+"/"+config_1.CONFIG.MATCHES;try{var e=yield(yield node_fetch_1.default(t,{headers:{"User-Agent":"node-fetch"}})).text();const d=cheerio_1.default.load(e,{normalizeWhitespace:!0}),a=d(".upcomingMatch"),l=[];if(a.map((t,e)=>{const a=d(e),n=a.children("a").attr("href");var e=Number(n.split("/")[2]),r=new Date(parseInt(a.find(".matchTime").attr("data-unix"),10)).toISOString(),i={name:a.find(".matchEventName").text(),logo:a.find(".matchEventLogo").attr("src")},o=Number(a.attr("stars")),c=a.find(".matchMeta").text();const h=a.find(".matchTeams");if(h.html()){const f=h.find(".matchTeam.team1"),u=h.find(".matchTeam.team2");var m={id:Number(a.attr("team1")),name:f.find(".matchTeamName").text()||"n/a",logo:f.find(".matchTeamLogo").attr("src")},s={id:Number(a.attr("team2")),name:u.find(".matchTeamName").text()||"n/a",logo:u.find(".matchTeamLogo").attr("src")},e={id:e,time:r,event:i,stars:o,maps:config_1.MAPS[c]||c,teams:[m,s]};l[l.length]=e}}),l.length)return l;throw new Error("There are no matches available, something went wrong. Please contact the library maintainer on https://github.com/dajk/hltv-api")}catch(t){throw new Error(t)}})}exports.getMatches=getMatches;
"use strict";var __awaiter=this&&this.__awaiter||function(e,o,s,l){return new(s=s||Promise)(function(a,t){function r(e){try{i(l.next(e))}catch(e){t(e)}}function n(e){try{i(l.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?a(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(r,n)}i((l=l.apply(e,o||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getPlayerById=void 0;const cheerio_1=__importDefault(require("cheerio")),node_fetch_1=__importDefault(require("node-fetch")),config_1=require("./config");function getPlayerById(g){var k;return __awaiter(this,void 0,void 0,function*(){var e=`${config_1.CONFIG.BASE}/${config_1.CONFIG.PLAYERS}/${g}/_`;try{var t=yield(yield node_fetch_1.default(e,{headers:{"User-Agent":"node-fetch"}})).text();const p=cheerio_1.default.load(t,{normalizeWhitespace:!0}),_=p(".playerSummaryStatBox");if(!_.html())throw new Error("There is no player available, something went wrong. Please contact the library maintainer on https://github.com/dajk/hltv-api");const w=_.find(".summaryBodyshotContainer");var a=w.children("img").eq(1).attr("src");const v=_.find(".summaryBreakdownContainer");var r=v.find(".summaryNickname").text(),n=v.find(".summaryRealname").text().trim(),i=v.find(".SummaryTeamname").text(),o=Number(null==(k=v.find(".SummaryTeamname").find("a").attr("href"))?void 0:k.split("/")[3]),s=parseInt(v.find(".summaryPlayerAge").text(),10);const x=v.find(".summaryStatBreakdownRow").eq(0).find(".summaryStatBreakdown");var l=parseFloat(x.eq(0).find(".summaryStatBreakdownDataValue").text()),d=parseFloat(x.eq(1).find(".summaryStatBreakdownDataValue").text()),m=parseFloat(x.eq(2).find(".summaryStatBreakdownDataValue").text());const q=v.find(".summaryStatBreakdownRow").eq(1).find(".summaryStatBreakdown");var u=parseFloat(q.eq(0).find(".summaryStatBreakdownDataValue").text()),c=parseFloat(q.eq(1).find(".summaryStatBreakdownDataValue").text()),f=parseFloat(q.eq(2).find(".summaryStatBreakdownDataValue").text());const B=p(".statistics .columns .col");var y=parseFloat(B.eq(0).children(".stats-row").eq(1).children("span").eq(1).text()),h=parseInt(B.eq(0).children(".stats-row").eq(6).children("span").eq(1).text(),10);return{id:Number(g),team:{id:o,name:i},image:a,nickname:r,name:n,age:s||null,rating:l,impact:u||null,dpr:d||null,apr:c||null,kast:m||null,kpr:f,headshots:y,mapsPlayed:h||null}}catch(e){throw new Error(e)}})}exports.getPlayerById=getPlayerById;
"use strict";var __awaiter=this&&this.__awaiter||function(e,o,l,s){return new(l=l||Promise)(function(r,t){function a(e){try{i(s.next(e))}catch(e){t(e)}}function n(e){try{i(s.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?r(e.value):((t=e.value)instanceof l?t:new l(function(e){e(t)})).then(a,n)}i((s=s.apply(e,o||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getTopPlayers=void 0;const cheerio_1=__importDefault(require("cheerio")),node_fetch_1=__importDefault(require("node-fetch")),config_1=require("./config");function getTopPlayers(){return __awaiter(this,void 0,void 0,function*(){var e=config_1.CONFIG.BASE+"/"+config_1.CONFIG.PLAYERS;try{var t=yield(yield node_fetch_1.default(e,{headers:{"User-Agent":"node-fetch"}})).text();const u=cheerio_1.default.load(t,{normalizeWhitespace:!0}),r=u(".stats-table.player-ratings-table tbody tr"),h=[];if(r.map((e,t)=>{const r=u(t),a=r.find(".playerCol").find("a").attr("href");var[,,,t,n]=a.split("/");const i=r.find("td");var o=i.eq(0).text(),l=i.eq(1).find("img").attr("title"),s=i.eq(2).text(),c=i.eq(5).text(),f=i.eq(6).text(),t={id:parseInt(t,10),team:l,nickname:o,slug:n,mapsPlayed:parseInt(s,10),kd:parseFloat(c),rating:parseFloat(f)};h[h.length]=t}),h.length)return h;throw new Error("There are no players available, something went wrong. Please contact the library maintainer on https://github.com/dajk/hltv-api")}catch(e){throw new Error(e)}})}exports.getTopPlayers=getTopPlayers;
"use strict";var __awaiter=this&&this.__awaiter||function(t,o,s,c){return new(s=s||Promise)(function(n,e){function r(t){try{a(c.next(t))}catch(t){e(t)}}function i(t){try{a(c.throw(t))}catch(t){e(t)}}function a(t){var e;t.done?n(t.value):((e=t.value)instanceof s?e:new s(function(t){t(e)})).then(r,i)}a((c=c.apply(t,o||[])).next())})},__importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getResults=void 0;const cheerio_1=__importDefault(require("cheerio")),node_fetch_1=__importDefault(require("node-fetch")),config_1=require("./config");function getResults(){return __awaiter(this,void 0,void 0,function*(){var t=config_1.CONFIG.BASE+"/"+config_1.CONFIG.RESULTS;try{var e=yield(yield node_fetch_1.default(t,{headers:{"User-Agent":"node-fetch"}})).text();const d=cheerio_1.default.load(e,{normalizeWhitespace:!0}),h=[];var n=d(".allres .result-con");if(d(n).each((t,e)=>{const n=d(e).find("tr");var r=Number(n.parents(".result-con").attr("data-zonedgrouping-entry-unix")),r=new Date(r).toISOString();const i=n.children(".team-cell").first(),a=n.children(".team-cell").last(),o=d(e).children("a").attr("href"),s=n.find(".map-text"),c=n.find(".result-score").children("span").first(),l=n.find(".result-score").children("span").last();var e={name:i.find(".team").text(),logo:null!=(e=i.find("img").attr("src"))&&e.includes("https://")?i.find("img").attr("src"):""+config_1.CONFIG.BASE+i.find("img").attr("src"),result:parseInt(c.text(),10)},u={name:a.find(".team").text(),logo:null!=(u=a.find("img").attr("src"))&&u.includes("https://")?a.find("img").attr("src"):""+config_1.CONFIG.BASE+a.find("img").attr("src"),result:parseInt(l.text(),10)},f={event:{name:n.find(".event-name").text(),logo:null!=(f=n.find(".event-logo").attr("src"))&&f.includes("https://")?n.find(".event-logo").attr("src"):""+config_1.CONFIG.BASE+n.find(".event-logo").attr("src")},maps:s.text(),time:r,teams:[e,u],matchId:parseInt(o.split("/")[2],10)};h.push(f)}),h.length)return h;throw new Error("There are no results available, something went wrong. Please contact the library maintainer on https://github.com/dajk/hltv-api")}catch(t){throw new Error(t)}})}exports.getResults=getResults;
"use strict";var __awaiter=this&&this.__awaiter||function(e,a,c,s){return new(c=c||Promise)(function(n,t){function r(e){try{o(s.next(e))}catch(e){t(e)}}function i(e){try{o(s.throw(e))}catch(e){t(e)}}function o(e){var t;e.done?n(e.value):((t=e.value)instanceof c?t:new c(function(e){e(t)})).then(r,i)}o((s=s.apply(e,a||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const node_fetch_1=__importDefault(require("node-fetch")),xml2js_1=__importDefault(require("xml2js")),config_1=require("./config");function validateXML(e){return"<?xml"===e.slice(0,5)}function getRSS(c){return __awaiter(this,void 0,void 0,function*(){var e=`${config_1.CONFIG.BASE}/${config_1.CONFIG.RSS}/`+c;try{var t=yield(yield node_fetch_1.default(e,{headers:{"User-Agent":"node-fetch"}})).text();const o=new xml2js_1.default.Parser;if(!validateXML(t))throw new Error("Invalid XML");var n=yield o.parseStringPromise(t),r=n.rss.channel[0].item["length"];const a=[];for(let e=0;e<r;e+=1){var i={title:n.rss.channel[0].item[e].title[0],description:n.rss.channel[0].item[e].description[0],link:n.rss.channel[0].item[e].link[0],time:new Date(n.rss.channel[0].item[e].pubDate[0]).toISOString()};a.push(i)}return a}catch(e){throw new Error(e)}})}exports.default=getRSS;
"use strict";var __awaiter=this&&this.__awaiter||function(e,o,c,f){return new(c=c||Promise)(function(r,t){function i(e){try{a(f.next(e))}catch(e){t(e)}}function n(e){try{a(f.throw(e))}catch(e){t(e)}}function a(e){var t;e.done?r(e.value):((t=e.value)instanceof c?t:new c(function(e){e(t)})).then(i,n)}a((f=f.apply(e,o||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getTeamById=void 0;const cheerio_1=__importDefault(require("cheerio")),node_fetch_1=__importDefault(require("node-fetch")),config_1=require("./config");function getTeamById(u){return __awaiter(this,void 0,void 0,function*(){var e=`${config_1.CONFIG.BASE}/${config_1.CONFIG.TEAM}/${u}/_`;try{var t=yield(yield node_fetch_1.default(e,{headers:{"User-Agent":"node-fetch"}})).text();const c=cheerio_1.default.load(t,{normalizeWhitespace:!0}),f=c(".teamProfile");if(!f.html())throw new Error("There is no team available, something went wrong. Please contact the library maintainer on https://github.com/dajk/hltv-api");const l=f.find(".bodyshot-team").children(),d=[];l.each((e,t)=>{const r=c(t);var t=r.find(".flag").attr("title"),i=""+config_1.CONFIG.BASE+r.find(".flag").attr("src");d.push({fullname:r.find("img").attr("title"),image:r.find("img").attr("src"),nickname:r.attr("title"),country:t?{name:t,flag:i}:void 0})});var r=f.find(".profile-team-name").text(),i=f.find(".teamlogo").attr("src");const h=f.find(".profile-team-stats-container").children();var n=Number(h.eq(0).find(".right").text().replace("#","")),a=Number(h.eq(2).find(".right").text()),o=h.eq(3).find(".right").text().trim();return{id:u,name:r,logo:i,ranking:n,coach:o,averagePlayerAge:a,players:d}}catch(e){throw new Error(e)}})}exports.getTeamById=getTeamById;
"use strict";var __awaiter=this&&this.__awaiter||function(e,o,c,f){return new(c=c||Promise)(function(n,t){function i(e){try{a(f.next(e))}catch(e){t(e)}}function r(e){try{a(f.throw(e))}catch(e){t(e)}}function a(e){var t;e.done?n(e.value):((t=e.value)instanceof c?t:new c(function(e){e(t)})).then(i,r)}a((f=f.apply(e,o||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getTopTeams=void 0;const cheerio_1=__importDefault(require("cheerio")),node_fetch_1=__importDefault(require("node-fetch")),config_1=require("./config");function getTopTeams(){return __awaiter(this,void 0,void 0,function*(){var e=config_1.CONFIG.BASE+"/"+config_1.CONFIG.TEAMS;try{var t=yield(yield node_fetch_1.default(e,{headers:{"User-Agent":"node-fetch"}})).text();const c=cheerio_1.default.load(t,{normalizeWhitespace:!0}),n=c(".ranked-team"),f=[];if(n.map((e,t)=>{const n=c(t);var t=Number(n.find(".moreLink").attr("href").split("/")[2]),i=parseInt(n.find(".position").text().replace("#",""),10),r=n.find(".team-logo").find("img").attr("src"),a=n.find(".teamLine").find(".name").text();const o=[];n.find(".lineup").children().children().children().each((e,t)=>{const n=c(t).find("a"),i=n.find(".playerPicture"),r=n.find(".nick"),a=r.find("img");o.push({fullname:i.attr("title"),image:i.attr("src"),nickname:r.text(),country:{name:a.attr("title"),flag:""+config_1.CONFIG.BASE+a.attr("src")}})});t={id:t,ranking:i,name:a,logo:r,players:o};f[f.length]=t}),f.length)return f;throw new Error("There are no teams available, something went wrong. Please contact the library maintainer on https://github.com/dajk/hltv-api")}catch(e){throw new Error(e)}})}exports.getTopTeams=getTopTeams;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyIsImNvbmZpZy5qcyIsImluZGV4LmpzIiwibWF0Y2gtc3RhdHMuanMiLCJtYXRjaC5qcyIsIm1hdGNoZXMuanMiLCJwbGF5ZXIuanMiLCJwbGF5ZXJzLmpzIiwicmVzdWx0cy5qcyIsInJzcy5qcyIsInRlYW0uanMiLCJ0ZWFtcy5qcyJdLCJuYW1lcyI6WyJsZXQiLCJidG5zIiwiQXJyYXkiLCJmcm9tIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnRuc1RyeSIsImZvckVhY2giLCJlbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInBhbmVsIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwic3R5bGUiLCJtYXhIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJjb250YWlucyIsImxvY2F0aW9uIiwiaHJlZiIsIkhMVFYiLCJyZXF1aXJlIiwiZGVmYXVsdCIsImV4cHJlc3MiLCJhcHAiLCJjb25zb2xlIiwibG9nIiwiZ2V0IiwiYXN5bmMiLCJyZXEiLCJyZXMiLCJuZXdzIiwiZ2V0TmV3cyIsImpzb24iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk1BUFMiLCJDT05GSUciLCJCQVNFIiwiQ0ROIiwiUlNTIiwiUkVTVUxUUyIsIk1BVENIRVMiLCJQTEFZRVJTIiwiVEVBTVMiLCJURUFNIiwidHJuIiwibXJnIiwiZDIiLCJpbmYiLCJ2dGciLCJvdnAiLCJudWtlIiwiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIm1hdGNoXzEiLCJtYXRjaGVzXzEiLCJyZXN1bHRzXzEiLCJwbGF5ZXJzXzEiLCJwbGF5ZXJfMSIsInRlYW1zXzEiLCJ0ZWFtXzEiLCJyc3NfMSIsImdldFJlc3VsdHMiLCJnZXRNYXRjaEJ5SWQiLCJnZXRNYXRjaGVzIiwiZ2V0VG9wUGxheWVycyIsImdldFBsYXllckJ5SWQiLCJnZXRUb3BUZWFtcyIsImdldFRlYW1CeUlkIiwiZ2V0U3RhdHNCeU1hdGNoSWQiLCJjaGVlcmlvXzEiLCJub2RlX2ZldGNoXzEiLCJjb25maWdfMSIsIm1hdGNoSWQiLCJ1cmwiLCJib2R5IiwiaGVhZGVycyIsIlVzZXItQWdlbnQiLCJ0ZXh0IiwiJCIsImxvYWQiLCJub3JtYWxpemVXaGl0ZXNwYWNlIiwic3RhdHMiLCJhbGxDb250ZW50IiwiZmluZCIsInRlYW0xU3RhdHMiLCJjaGlsZHJlbiIsImZpcnN0IiwibGlzdDEiLCJub3QiLCJ0ZWFtMlN0YXRzIiwiZWFjaCIsImkiLCJlbCIsIm9iakRhdGEiLCJwbGF5ZXJOYW1lIiwicmVwbGFjZSIsInBsYXllcklkIiwiYXR0ciIsImtpbGxzIiwicGFyc2VJbnQiLCJzcGxpdCIsImRlYXRocyIsInBsdXNNaW51cyIsImFkciIsInBhcnNlRmxvYXQiLCJrYXN0IiwicmF0aW5nIiwicHVzaCIsImxhc3QiLCJsaXN0MiIsImxlbmd0aCIsIkVycm9yIiwiZXJyb3IiLCJfYSIsIl9iIiwic3RhdHMxIiwic3RhdHMyIiwibmFtZUVsIiwibmFtZSIsIm5pY2tuYW1lIiwiaWQiLCJOdW1iZXIiLCJuaWNrIiwicmVtb3ZlIiwibWFwc0VsIiwibWFwcyIsInRpbWVBbmRFdmVudCIsIl8iLCJtYXBUZWFtMSIsInNpZGUiLCJlcSIsInJvdW5kcyIsInNlY29uZCIsImV4dCIsIm1hcFRlYW0yIiwicGljayIsInRlYW1zIiwidGltZSIsIkRhdGUiLCJkYXRhIiwidG9JU09TdHJpbmciLCJldmVudCIsImxvZ28iLCJ0ZWFtMUVsIiwidGVhbTJFbCIsInRlYW0xIiwiaW5jbHVkZXMiLCJwbGF5ZXJzIiwidGVhbTIiLCJtYXRjaGVzIiwibWFwIiwiX2kiLCJsaW5rIiwic3RhcnMiLCJ0ZWFtc0VsIiwiaHRtbCIsInJlc3BvbnNlIiwibWFpblRhYmxlIiwiaW1hZ2VCbG9jayIsImltYWdlIiwibWFpblRhYmxlQ29udGVudCIsInRyaW0iLCJ0ZWFtTmFtZSIsInRlYW1JZCIsImFnZSIsInN0YXRSb3cxIiwiZHByIiwic3RhdFJvdzIiLCJpbXBhY3QiLCJhcHIiLCJrcHIiLCJhZGRpdGlvbmFsU3RhdHMiLCJoZWFkc2hvdHMiLCJ0ZWFtIiwibWFwc1BsYXllZCIsInNsdWciLCJ0ZCIsImtkIiwicmVzdWx0cyIsInJlc3VsdEVsZW1lbnRzIiwidGltZXN0YW1wIiwicGFyZW50cyIsInJlc3VsdDEiLCJyZXN1bHQyIiwiX2MiLCJ4bWwyanNfMSIsInZhbGlkYXRlWE1MIiwieG1sIiwic2xpY2UiLCJnZXRSU1MiLCJ0eXBlIiwicGFyc2VyIiwiUGFyc2VyIiwicGFyc2VTdHJpbmdQcm9taXNlIiwicnNzIiwiY2hhbm5lbCIsIml0ZW0iLCJvYmoiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwicHViRGF0ZSIsInRlYW1Qcm9maWxlIiwibGluZXVwIiwicCIsInBsYXllciIsImNvdW50cnlOYW1lIiwiY291bnRyeUZsYWciLCJmdWxsbmFtZSIsImNvdW50cnkiLCJmbGFnIiwidW5kZWZpbmVkIiwic3RhdHNDb250YWluZXIiLCJyYW5raW5nIiwiYXZlcmFnZVBsYXllckFnZSIsImNvYWNoIiwiX19pIiwicGljIl0sIm1hcHBpbmdzIjoiQUFBQUEsSUFBSUMsS0FBT0MsTUFBTUMsS0FBS0MsU0FBU0MsaUJBQWlCLGVBYTVDQyxTQVpKTCxLQUFLTSxRQUFRQyxJQUNUQSxFQUFRQyxpQkFBaUIsUUFBUyxLQUM5QkQsRUFBUUUsVUFBVUMsT0FBTyxVQUN6QlgsSUFBSVksRUFBUUosRUFBUUssbUJBQ2hCRCxFQUFNRSxNQUFNQyxVQUNaSCxFQUFNRSxNQUFNQyxVQUFZLEtBRXhCSCxFQUFNRSxNQUFNQyxVQUFZSCxFQUFNSSxhQUFlLFNBSzNDZCxNQUFNQyxLQUFLQyxT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RStDLEVBQU9sRCxFQUFHVCxLQUFLLGNBQWNBLEtBQUssT0FBT2MsS0FBSyxPQUM5Q3FCLEVBQU8xQixFQUFHVCxLQUFLLGFBQWFBLEtBQUssU0FBU04sT0FDaEQsTUFBTXNFLEVBQVUsR0FDaEJ2RCxFQUFHVCxLQUFLLFdBQ0hFLFdBQ0FBLFdBQ0FBLFdBQ0FLLEtBQUssQ0FBQzZILEVBQUtaLEtBQ1osTUFBTUMsRUFBUzlILEVBQUU2SCxHQUFHeEgsS0FBSyxLQUNuQnFJLEVBQU1aLEVBQU96SCxLQUFLLGtCQUNsQnVDLEVBQU9rRixFQUFPekgsS0FBSyxTQUNuQjZILEVBQVV0RixFQUFLdkMsS0FBSyxPQUMxQmdFLEVBQVF4QyxLQUFLLENBQ1RvRyxTQUFVUyxFQUFJdkgsS0FBSyxTQUNuQjhELE1BQU95RCxFQUFJdkgsS0FBSyxPQUNoQnNCLFNBQVVHLEVBQUs3QyxPQUNmbUksUUFBUyxDQUNMMUYsS0FBTTBGLEVBQVEvRyxLQUFLLFNBQ25CZ0gsS0FBTSxHQUFHMUksU0FBU3ZELE9BQU9DLEtBQU8rTCxFQUFRL0csS0FBSyxZQUluRDJELEVBQVcsQ0FDYnBDLEdBQUFBLEVBQ0E0RixRQUFBQSxFQUNBOUYsS0FBQUEsRUFDQXdCLEtBQUFBLEVBQ0FLLFFBQUFBLEdBRUpYLEVBQU1BLEVBQU0xQixRQUFVOEMsSUFFckJwQixFQUFNMUIsT0FHWCxPQUFPMEIsRUFGSCxNQUFNLElBQUl6QixNQUFNLGlJQUl4QixNQUFPQyxHQUNILE1BQU0sSUFBSUQsTUFBTUMsTUFJNUJuRyxRQUFRcUQsWUFBY0EiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGJ0bnMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2hvdy10ZXh0XCIpKTtcclxuYnRucy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTtcclxuICAgICAgICBsZXQgcGFuZWwgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICBpZiAocGFuZWwuc3R5bGUubWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHBhbmVsLnN0eWxlLm1heEhlaWdodCA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGFuZWwuc3R5bGUubWF4SGVpZ2h0ID0gcGFuZWwuc2Nyb2xsSGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmxldCBidG5zVHJ5ID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJ0blwiKSk7XHJcbmJ0bnNUcnkuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgIGlmKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidHJ5XCIpKSB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gXCIvaW5kZXguaHRtbCNjb21wYXJlXCJcclxuICAgICAgICB9KVxyXG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImV4YW1wbGVcIikpIHtcclxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBcIi9pbmRleC5odG1sI3R1dG9yaWFsXCJcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59KVxyXG5cclxuY29uc3QgSExUViA9IHJlcXVpcmUoJ0U6XFxGcm9udC1lbmRcXHBlZWVhNC5naXRodWIuaW9cXG5vZGVfbW9kdWxlc1xcaGx0di1hcGlcXGRpc3RcXGluZGV4LmpzJykuZGVmYXVsdFxyXG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKVxyXG5jb25zb2xlLmxvZyhITFRWKTtcclxuXHJcbmFwcC5nZXQoJy8nLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICBjb25zdCBuZXdzID0gYXdhaXQgSExUVi5nZXROZXdzKClcclxuICByZXMuanNvbihuZXdzKVxyXG4gIGNvbnNvbGUubG9nKG5ld3MsIHJlcyk7XHJcbn0pIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1BUFMgPSBleHBvcnRzLkNPTkZJRyA9IHZvaWQgMDtcbmV4cG9ydHMuQ09ORklHID0ge1xuICAgIEJBU0U6ICdodHRwczovL3d3dy5obHR2Lm9yZycsXG4gICAgQ0ROOiAnaHR0cHM6Ly9pbWctY2RuLmhsdHYub3JnJyxcbiAgICBSU1M6ICdyc3MnLFxuICAgIFJFU1VMVFM6ICdyZXN1bHRzJyxcbiAgICBNQVRDSEVTOiAnbWF0Y2hlcycsXG4gICAgUExBWUVSUzogJ3N0YXRzL3BsYXllcnMnLFxuICAgIFRFQU1TOiAncmFua2luZy90ZWFtcycsXG4gICAgVEVBTTogJ3RlYW0nLFxufTtcbmV4cG9ydHMuTUFQUyA9IHtcbiAgICB0cm46ICdUcmFpbicsXG4gICAgbXJnOiAnTWlyYWdlJyxcbiAgICBkMjogJ0R1c3QgMicsXG4gICAgaW5mOiAnSW5mZXJubycsXG4gICAgdnRnOiAnVmVydGlnbycsXG4gICAgb3ZwOiAnT3ZlcnBhc3MnLFxuICAgIG51a2U6ICdOdWtlJyxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1hdGNoXzEgPSByZXF1aXJlKFwiLi9tYXRjaFwiKTtcbmNvbnN0IG1hdGNoZXNfMSA9IHJlcXVpcmUoXCIuL21hdGNoZXNcIik7XG5jb25zdCByZXN1bHRzXzEgPSByZXF1aXJlKFwiLi9yZXN1bHRzXCIpO1xuY29uc3QgcGxheWVyc18xID0gcmVxdWlyZShcIi4vcGxheWVyc1wiKTtcbmNvbnN0IHBsYXllcl8xID0gcmVxdWlyZShcIi4vcGxheWVyXCIpO1xuY29uc3QgdGVhbXNfMSA9IHJlcXVpcmUoXCIuL3RlYW1zXCIpO1xuY29uc3QgdGVhbV8xID0gcmVxdWlyZShcIi4vdGVhbVwiKTtcbmNvbnN0IHJzc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Jzc1wiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgZ2V0TmV3czogKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7IHJldHVybiByc3NfMS5kZWZhdWx0KCduZXdzJyk7IH0pLFxuICAgIGdldFJlc3VsdHM6IHJlc3VsdHNfMS5nZXRSZXN1bHRzLFxuICAgIGdldE1hdGNoQnlJZDogbWF0Y2hfMS5nZXRNYXRjaEJ5SWQsXG4gICAgZ2V0TWF0Y2hlczogbWF0Y2hlc18xLmdldE1hdGNoZXMsXG4gICAgZ2V0VG9wUGxheWVyczogcGxheWVyc18xLmdldFRvcFBsYXllcnMsXG4gICAgZ2V0UGxheWVyQnlJZDogcGxheWVyXzEuZ2V0UGxheWVyQnlJZCxcbiAgICBnZXRUb3BUZWFtczogdGVhbXNfMS5nZXRUb3BUZWFtcyxcbiAgICBnZXRUZWFtQnlJZDogdGVhbV8xLmdldFRlYW1CeUlkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFN0YXRzQnlNYXRjaElkID0gdm9pZCAwO1xuY29uc3QgY2hlZXJpb18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjaGVlcmlvXCIpKTtcbmNvbnN0IG5vZGVfZmV0Y2hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibm9kZS1mZXRjaFwiKSk7XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbmZ1bmN0aW9uIGdldFN0YXRzQnlNYXRjaElkKG1hdGNoSWQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHtjb25maWdfMS5DT05GSUcuQkFTRX0vJHtjb25maWdfMS5DT05GSUcuTUFUQ0hFU30vJHttYXRjaElkfS9fYDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB5aWVsZCAoeWllbGQgbm9kZV9mZXRjaF8xLmRlZmF1bHQodXJsLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnVXNlci1BZ2VudCc6ICdub2RlLWZldGNoJyB9LFxuICAgICAgICAgICAgfSkpLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvXzEuZGVmYXVsdC5sb2FkKGJvZHksIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVXaGl0ZXNwYWNlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBzdGF0cyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgYWxsQ29udGVudCA9ICQoJy5tYXRjaHN0YXRzJykuZmluZCgnI2FsbC1jb250ZW50Jyk7XG4gICAgICAgICAgICBjb25zdCB0ZWFtMVN0YXRzID0gYWxsQ29udGVudC5jaGlsZHJlbigndGFibGUudG90YWxzdGF0cycpLmZpcnN0KCkuY2hpbGRyZW4oJ3Rib2R5Jyk7XG4gICAgICAgICAgICBjb25zdCBsaXN0MSA9IHRlYW0xU3RhdHMuY2hpbGRyZW4oJ3RyJykubm90KCcuaGVhZGVyLXJvdycpO1xuICAgICAgICAgICAgbGlzdDEuZWFjaCgoaSwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJOYW1lID0gZWwuZmluZCgnLnBsYXllcnMgLmd0U21hcnRwaG9uZS1vbmx5JykudGV4dCgpLnJlcGxhY2UoLycvZywgJycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllcklkID0gZWwuZmluZCgnLnBsYXllcnMnKS5maW5kKCdhJykuYXR0cignaHJlZicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtpbGxzID0gcGFyc2VJbnQoZWwuZmluZCgndGQua2QnKS50ZXh0KCkuc3BsaXQoJy0nKVswXSwgMTApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlYXRocyA9IHBhcnNlSW50KGVsLmZpbmQoJ3RkLmtkJykudGV4dCgpLnNwbGl0KCctJylbMV0sIDEwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbHVzTWludXMgPSBwYXJzZUludChlbC5maW5kKCd0ZC5wbHVzLW1pbnVzJykudGV4dCgpLCAxMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWRyID0gcGFyc2VGbG9hdChlbC5maW5kKCd0ZC5hZHInKS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGthc3QgPSBwYXJzZUZsb2F0KGVsLmZpbmQoJ3RkLmthc3QnKS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGluZyA9IHBhcnNlRmxvYXQoZWwuZmluZCgndGQucmF0aW5nJykudGV4dCgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmpEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJJZCxcbiAgICAgICAgICAgICAgICAgICAga2lsbHMsXG4gICAgICAgICAgICAgICAgICAgIGRlYXRocyxcbiAgICAgICAgICAgICAgICAgICAgcGx1c01pbnVzLFxuICAgICAgICAgICAgICAgICAgICBhZHIsXG4gICAgICAgICAgICAgICAgICAgIGthc3QsXG4gICAgICAgICAgICAgICAgICAgIHJhdGluZyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHN0YXRzLnB1c2gob2JqRGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRlYW0yU3RhdHMgPSBhbGxDb250ZW50LmNoaWxkcmVuKCd0YWJsZS50b3RhbHN0YXRzJykubGFzdCgpLmNoaWxkcmVuKCd0Ym9keScpO1xuICAgICAgICAgICAgY29uc3QgbGlzdDIgPSB0ZWFtMlN0YXRzLmNoaWxkcmVuKCd0cicpLm5vdCgnLmhlYWRlci1yb3cnKTtcbiAgICAgICAgICAgIGxpc3QyLmVhY2goKGksIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9ICQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWVyTmFtZSA9IGVsLmZpbmQoJy5wbGF5ZXJzIC5ndFNtYXJ0cGhvbmUtb25seScpLnRleHQoKS5yZXBsYWNlKC8nL2csICcnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJJZCA9IGVsLmZpbmQoJy5wbGF5ZXJzJykuZmluZCgnYScpLmF0dHIoJ2hyZWYnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBraWxscyA9IHBhcnNlSW50KGVsLmZpbmQoJ3RkLmtkJykudGV4dCgpLnNwbGl0KCctJylbMF0sIDEwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWF0aHMgPSBwYXJzZUludChlbC5maW5kKCd0ZC5rZCcpLnRleHQoKS5zcGxpdCgnLScpWzFdLCAxMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGx1c01pbnVzID0gcGFyc2VJbnQoZWwuZmluZCgndGQucGx1cy1taW51cycpLnRleHQoKSwgMTApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFkciA9IHBhcnNlRmxvYXQoZWwuZmluZCgndGQuYWRyJykudGV4dCgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBrYXN0ID0gcGFyc2VGbG9hdChlbC5maW5kKCd0ZC5rYXN0JykudGV4dCgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCByYXRpbmcgPSBwYXJzZUZsb2F0KGVsLmZpbmQoJ3RkLnJhdGluZycpLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGxheWVySWQsXG4gICAgICAgICAgICAgICAgICAgIGtpbGxzLFxuICAgICAgICAgICAgICAgICAgICBkZWF0aHMsXG4gICAgICAgICAgICAgICAgICAgIHBsdXNNaW51cyxcbiAgICAgICAgICAgICAgICAgICAgYWRyLFxuICAgICAgICAgICAgICAgICAgICBrYXN0LFxuICAgICAgICAgICAgICAgICAgICByYXRpbmcsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzdGF0cy5wdXNoKG9iakRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXN0YXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU29tZXRoaW5nIHdlbnQgd3JvbmcsIGhlcmUgaXMgbm8gc3RhdHMgZm91bmQgZm9yIHRoaXMgbWF0Y2guIFBsZWFzZSBjcmVhdGUgYW4gaXNzdWUgaW4gdGhpcyByZXBvc2l0b3J5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYWprL2hsdHYtYXBpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhdHM7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLmdldFN0YXRzQnlNYXRjaElkID0gZ2V0U3RhdHNCeU1hdGNoSWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXRjaC1zdGF0cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRNYXRjaEJ5SWQgPSB2b2lkIDA7XG5jb25zdCBjaGVlcmlvXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNoZWVyaW9cIikpO1xuY29uc3Qgbm9kZV9mZXRjaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJub2RlLWZldGNoXCIpKTtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuZnVuY3Rpb24gZ2V0TWF0Y2hCeUlkKG1hdGNoSWQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke2NvbmZpZ18xLkNPTkZJRy5CQVNFfS8ke2NvbmZpZ18xLkNPTkZJRy5NQVRDSEVTfS8ke21hdGNoSWR9L19gO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHlpZWxkICh5aWVsZCBub2RlX2ZldGNoXzEuZGVmYXVsdCh1cmwsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdVc2VyLUFnZW50JzogJ25vZGUtZmV0Y2gnIH0sXG4gICAgICAgICAgICB9KSkudGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgJCA9IGNoZWVyaW9fMS5kZWZhdWx0LmxvYWQoYm9keSwge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVdoaXRlc3BhY2U6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRzMSA9IFtdO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHMyID0gW107XG4gICAgICAgICAgICBjb25zdCBhbGxDb250ZW50ID0gJCgnLm1hdGNoc3RhdHMnKS5maW5kKCcjYWxsLWNvbnRlbnQnKTtcbiAgICAgICAgICAgIGNvbnN0IHRlYW0xU3RhdHMgPSBhbGxDb250ZW50LmNoaWxkcmVuKCd0YWJsZS50b3RhbHN0YXRzJykuZmlyc3QoKS5jaGlsZHJlbigndGJvZHknKTtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QxID0gdGVhbTFTdGF0cy5jaGlsZHJlbigndHInKS5ub3QoJy5oZWFkZXItcm93Jyk7XG4gICAgICAgICAgICBsaXN0MS5lYWNoKChpLCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lRWwgPSBlbC5maW5kKCcucGxheWVycyAuZ3RTbWFydHBob25lLW9ubHknKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gbmFtZUVsLnRleHQoKS5yZXBsYWNlKC8nXFx3KycgLywgJycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5pY2tuYW1lID0gbmFtZUVsLmZpbmQoJy5wbGF5ZXItbmljaycpLnRleHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IE51bWJlcigoX2EgPSBlbFxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLnBsYXllcnMnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnYScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdocmVmJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zcGxpdCgnLycpWzJdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBraWxscyA9IHBhcnNlSW50KGVsLmZpbmQoJ3RkLmtkJykudGV4dCgpLnNwbGl0KCctJylbMF0sIDEwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWF0aHMgPSBwYXJzZUludChlbC5maW5kKCd0ZC5rZCcpLnRleHQoKS5zcGxpdCgnLScpWzFdLCAxMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWRyID0gcGFyc2VGbG9hdChlbC5maW5kKCd0ZC5hZHInKS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGthc3QgPSBwYXJzZUZsb2F0KGVsLmZpbmQoJ3RkLmthc3QnKS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGluZyA9IHBhcnNlRmxvYXQoZWwuZmluZCgndGQucmF0aW5nJykudGV4dCgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmpEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgbmlja25hbWUsXG4gICAgICAgICAgICAgICAgICAgIGtpbGxzLFxuICAgICAgICAgICAgICAgICAgICBkZWF0aHMsXG4gICAgICAgICAgICAgICAgICAgIGFkcixcbiAgICAgICAgICAgICAgICAgICAga2FzdCxcbiAgICAgICAgICAgICAgICAgICAgcmF0aW5nLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgc3RhdHMxLnB1c2gob2JqRGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRlYW0yU3RhdHMgPSBhbGxDb250ZW50LmNoaWxkcmVuKCd0YWJsZS50b3RhbHN0YXRzJykubGFzdCgpLmNoaWxkcmVuKCd0Ym9keScpO1xuICAgICAgICAgICAgY29uc3QgbGlzdDIgPSB0ZWFtMlN0YXRzLmNoaWxkcmVuKCd0cicpLm5vdCgnLmhlYWRlci1yb3cnKTtcbiAgICAgICAgICAgIGxpc3QyLmVhY2goKGksIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVFbCA9IGVsLmZpbmQoJy5wbGF5ZXJzIC5ndFNtYXJ0cGhvbmUtb25seScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5pY2sgPSBuYW1lRWwuZmluZCgnLnBsYXllci1uaWNrJykudGV4dCgpO1xuICAgICAgICAgICAgICAgIG5hbWVFbC5maW5kKCcucGxheWVyLW5pY2snKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gbmFtZUVsLnRleHQoKS5yZXBsYWNlKFwiJydcIiwgJycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5pY2tuYW1lID0gbmljaztcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IE51bWJlcigoX2EgPSBlbFxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLnBsYXllcnMnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnYScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdocmVmJykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zcGxpdCgnLycpWzJdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBraWxscyA9IHBhcnNlSW50KGVsLmZpbmQoJ3RkLmtkJykudGV4dCgpLnNwbGl0KCctJylbMF0sIDEwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWF0aHMgPSBwYXJzZUludChlbC5maW5kKCd0ZC5rZCcpLnRleHQoKS5zcGxpdCgnLScpWzFdLCAxMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWRyID0gcGFyc2VGbG9hdChlbC5maW5kKCd0ZC5hZHInKS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGthc3QgPSBwYXJzZUZsb2F0KGVsLmZpbmQoJ3RkLmthc3QnKS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGluZyA9IHBhcnNlRmxvYXQoZWwuZmluZCgndGQucmF0aW5nJykudGV4dCgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmpEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICBuaWNrbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIGtpbGxzLFxuICAgICAgICAgICAgICAgICAgICBkZWF0aHMsXG4gICAgICAgICAgICAgICAgICAgIGFkcixcbiAgICAgICAgICAgICAgICAgICAga2FzdCxcbiAgICAgICAgICAgICAgICAgICAgcmF0aW5nLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgc3RhdHMyLnB1c2gob2JqRGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghc3RhdHMxLmxlbmd0aCB8fCAhc3RhdHMyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU29tZXRoaW5nIHdlbnQgd3JvbmcsIGhlcmUgaXMgbm8gY29ycmVjdCBzdGF0cyBmb3VuZCBmb3IgdGhpcyBtYXRjaC4gUGxlYXNlIGNyZWF0ZSBhbiBpc3N1ZSBpbiB0aGlzIHJlcG9zaXRvcnkgaHR0cHM6Ly9naXRodWIuY29tL2RhamsvaGx0di1hcGknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1hcHNFbCA9ICQoJy5tYXBob2xkZXInKTtcbiAgICAgICAgICAgIGNvbnN0IG1hcHMgPSBbXTtcbiAgICAgICAgICAgIG1hcHNFbC5lYWNoKChfLCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcFRlYW0xID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBlbC5maW5kKCcucmVzdWx0cy1sZWZ0JykuZmluZCgnLnJlc3VsdHMtdGVhbW5hbWUnKS50ZXh0KCksXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlOiBlbC5maW5kKCcucmVzdWx0cy1jZW50ZXItaGFsZi1zY29yZScpLmNoaWxkcmVuKCkuZXEoMSkuYXR0cignY2xhc3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3VuZHM6IE51bWJlcihlbC5maW5kKCcucmVzdWx0cy1jZW50ZXItaGFsZi1zY29yZScpLmNoaWxkcmVuKCkuZXEoMSkudGV4dCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlOiBlbC5maW5kKCcucmVzdWx0cy1jZW50ZXItaGFsZi1zY29yZScpLmNoaWxkcmVuKCkuZXEoNSkuYXR0cignY2xhc3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3VuZHM6IE51bWJlcihlbC5maW5kKCcucmVzdWx0cy1jZW50ZXItaGFsZi1zY29yZScpLmNoaWxkcmVuKCkuZXEoNSkudGV4dCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBleHQ6IE51bWJlcihlbC5maW5kKCcucmVzdWx0cy1jZW50ZXItaGFsZi1zY29yZScpLmNoaWxkcmVuKCkuZXEoMTEpLnRleHQoKSksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXBUZWFtMiA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZWwuZmluZCgnLnJlc3VsdHMtcmlnaHQnKS5maW5kKCcucmVzdWx0cy10ZWFtbmFtZScpLnRleHQoKSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU6IGVsLmZpbmQoJy5yZXN1bHRzLWNlbnRlci1oYWxmLXNjb3JlJykuY2hpbGRyZW4oKS5lcSgzKS5hdHRyKCdjbGFzcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kczogTnVtYmVyKGVsLmZpbmQoJy5yZXN1bHRzLWNlbnRlci1oYWxmLXNjb3JlJykuY2hpbGRyZW4oKS5lcSgzKS50ZXh0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU6IGVsLmZpbmQoJy5yZXN1bHRzLWNlbnRlci1oYWxmLXNjb3JlJykuY2hpbGRyZW4oKS5lcSg3KS5hdHRyKCdjbGFzcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kczogTnVtYmVyKGVsLmZpbmQoJy5yZXN1bHRzLWNlbnRlci1oYWxmLXNjb3JlJykuY2hpbGRyZW4oKS5lcSg3KS50ZXh0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dDogTnVtYmVyKGVsLmZpbmQoJy5yZXN1bHRzLWNlbnRlci1oYWxmLXNjb3JlJykuY2hpbGRyZW4oKS5lcSgxMykudGV4dCgpKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG1hcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGVsLmZpbmQoJy5tYXBuYW1lJykudGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICBwaWNrOiBlbC5maW5kKCcucGljaycpLmZpbmQoJy5yZXN1bHRzLXRlYW1uYW1lJykudGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICB0ZWFtczogW21hcFRlYW0xLCBtYXBUZWFtMl0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVBbmRFdmVudCA9ICQoJy50aW1lQW5kRXZlbnQnKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSh0aW1lQW5kRXZlbnQuZmluZCgnLnRpbWUnKS5kYXRhKCd1bml4JykpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aW1lQW5kRXZlbnQuZmluZCgnLmV2ZW50JykuZmluZCgnYScpLnRleHQoKSxcbiAgICAgICAgICAgICAgICBsb2dvOiAnJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCB0ZWFtMUVsID0gJCgnLnRlYW1zQm94JykuY2hpbGRyZW4oJy50ZWFtJykuZXEoMCk7XG4gICAgICAgICAgICBjb25zdCB0ZWFtMkVsID0gJCgnLnRlYW1zQm94JykuY2hpbGRyZW4oJy50ZWFtJykuZXEoMSk7XG4gICAgICAgICAgICBjb25zdCB0ZWFtMSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0ZWFtMUVsLmZpbmQoJy50ZWFtTmFtZScpLnRleHQoKSxcbiAgICAgICAgICAgICAgICBsb2dvOiAoKF9hID0gdGVhbTFFbC5maW5kKCcubG9nbycpLmF0dHIoJ3NyYycpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5jbHVkZXMoJ2h0dHBzJykpID8gdGVhbTFFbC5maW5kKCcubG9nbycpLmF0dHIoJ3NyYycpXG4gICAgICAgICAgICAgICAgICAgIDogYCR7Y29uZmlnXzEuQ09ORklHLkJBU0V9JHt0ZWFtMUVsLmZpbmQoJy5sb2dvJykuYXR0cignc3JjJyl9YCxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IE51bWJlcih0ZWFtMUVsLmZpbmQoJy50ZWFtMS1ncmFkaWVudCcpLmNoaWxkcmVuKCkubGFzdCgpLnRleHQoKSksXG4gICAgICAgICAgICAgICAgcGxheWVyczogc3RhdHMxLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHRlYW0yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRlYW0yRWwuZmluZCgnLnRlYW1OYW1lJykudGV4dCgpLFxuICAgICAgICAgICAgICAgIGxvZ286ICgoX2IgPSB0ZWFtMkVsLmZpbmQoJy5sb2dvJykuYXR0cignc3JjJykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pbmNsdWRlcygnaHR0cHMnKSkgPyB0ZWFtMkVsLmZpbmQoJy5sb2dvJykuYXR0cignc3JjJylcbiAgICAgICAgICAgICAgICAgICAgOiBgJHtjb25maWdfMS5DT05GSUcuQkFTRX0ke3RlYW0yRWwuZmluZCgnLmxvZ28nKS5hdHRyKCdzcmMnKX1gLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogTnVtYmVyKHRlYW0yRWwuZmluZCgnLnRlYW0yLWdyYWRpZW50JykuY2hpbGRyZW4oKS5sYXN0KCkudGV4dCgpKSxcbiAgICAgICAgICAgICAgICBwbGF5ZXJzOiBzdGF0czIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogTnVtYmVyKG1hdGNoSWQpLFxuICAgICAgICAgICAgICAgIHRpbWUsXG4gICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgdGVhbXM6IFt0ZWFtMSwgdGVhbTJdLFxuICAgICAgICAgICAgICAgIG1hcHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRNYXRjaEJ5SWQgPSBnZXRNYXRjaEJ5SWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXRjaC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRNYXRjaGVzID0gdm9pZCAwO1xuY29uc3QgY2hlZXJpb18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjaGVlcmlvXCIpKTtcbmNvbnN0IG5vZGVfZmV0Y2hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibm9kZS1mZXRjaFwiKSk7XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbmZ1bmN0aW9uIGdldE1hdGNoZXMoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgdXJsID0gYCR7Y29uZmlnXzEuQ09ORklHLkJBU0V9LyR7Y29uZmlnXzEuQ09ORklHLk1BVENIRVN9YDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB5aWVsZCAoeWllbGQgbm9kZV9mZXRjaF8xLmRlZmF1bHQodXJsLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnVXNlci1BZ2VudCc6ICdub2RlLWZldGNoJyB9LFxuICAgICAgICAgICAgfSkpLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvXzEuZGVmYXVsdC5sb2FkKGJvZHksIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVXaGl0ZXNwYWNlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBhbGxDb250ZW50ID0gJCgnLnVwY29taW5nTWF0Y2gnKTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgIGFsbENvbnRlbnQubWFwKChfaSwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rID0gZWwuY2hpbGRyZW4oJ2EnKS5hdHRyKCdocmVmJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBOdW1iZXIobGluay5zcGxpdCgnLycpWzJdKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lID0gbmV3IERhdGUocGFyc2VJbnQoZWwuZmluZCgnLm1hdGNoVGltZScpLmF0dHIoJ2RhdGEtdW5peCcpLCAxMCkpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGVsLmZpbmQoJy5tYXRjaEV2ZW50TmFtZScpLnRleHQoKSxcbiAgICAgICAgICAgICAgICAgICAgbG9nbzogZWwuZmluZCgnLm1hdGNoRXZlbnRMb2dvJykuYXR0cignc3JjJyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFycyA9IE51bWJlcihlbC5hdHRyKCdzdGFycycpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBlbC5maW5kKCcubWF0Y2hNZXRhJykudGV4dCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlYW1zRWwgPSBlbC5maW5kKCcubWF0Y2hUZWFtcycpO1xuICAgICAgICAgICAgICAgIGlmICghdGVhbXNFbC5odG1sKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB0ZWFtMUVsID0gdGVhbXNFbC5maW5kKCcubWF0Y2hUZWFtLnRlYW0xJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVhbTJFbCA9IHRlYW1zRWwuZmluZCgnLm1hdGNoVGVhbS50ZWFtMicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlYW0xID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogTnVtYmVyKGVsLmF0dHIoJ3RlYW0xJykpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0ZWFtMUVsLmZpbmQoJy5tYXRjaFRlYW1OYW1lJykudGV4dCgpIHx8ICduL2EnLFxuICAgICAgICAgICAgICAgICAgICBsb2dvOiB0ZWFtMUVsLmZpbmQoJy5tYXRjaFRlYW1Mb2dvJykuYXR0cignc3JjJyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZWFtMiA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE51bWJlcihlbC5hdHRyKCd0ZWFtMicpKSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGVhbTJFbC5maW5kKCcubWF0Y2hUZWFtTmFtZScpLnRleHQoKSB8fCAnbi9hJyxcbiAgICAgICAgICAgICAgICAgICAgbG9nbzogdGVhbTJFbC5maW5kKCcubWF0Y2hUZWFtTG9nbycpLmF0dHIoJ3NyYycpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnMsXG4gICAgICAgICAgICAgICAgICAgIG1hcHM6IGNvbmZpZ18xLk1BUFNbbWFwXSB8fCBtYXAsXG4gICAgICAgICAgICAgICAgICAgIHRlYW1zOiBbdGVhbTEsIHRlYW0yXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGhdID0gcmVzcG9uc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghbWF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGFyZSBubyBtYXRjaGVzIGF2YWlsYWJsZSwgc29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSBjb250YWN0IHRoZSBsaWJyYXJ5IG1haW50YWluZXIgb24gaHR0cHM6Ly9naXRodWIuY29tL2RhamsvaGx0di1hcGknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRNYXRjaGVzID0gZ2V0TWF0Y2hlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGNoZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UGxheWVyQnlJZCA9IHZvaWQgMDtcbmNvbnN0IGNoZWVyaW9fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2hlZXJpb1wiKSk7XG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGUtZmV0Y2hcIikpO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5mdW5jdGlvbiBnZXRQbGF5ZXJCeUlkKGlkKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke2NvbmZpZ18xLkNPTkZJRy5CQVNFfS8ke2NvbmZpZ18xLkNPTkZJRy5QTEFZRVJTfS8ke2lkfS9fYDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB5aWVsZCAoeWllbGQgbm9kZV9mZXRjaF8xLmRlZmF1bHQodXJsLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnVXNlci1BZ2VudCc6ICdub2RlLWZldGNoJyB9LFxuICAgICAgICAgICAgfSkpLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvXzEuZGVmYXVsdC5sb2FkKGJvZHksIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVXaGl0ZXNwYWNlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBtYWluVGFibGUgPSAkKCcucGxheWVyU3VtbWFyeVN0YXRCb3gnKTtcbiAgICAgICAgICAgIGlmICghbWFpblRhYmxlLmh0bWwoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlcmUgaXMgbm8gcGxheWVyIGF2YWlsYWJsZSwgc29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSBjb250YWN0IHRoZSBsaWJyYXJ5IG1haW50YWluZXIgb24gaHR0cHM6Ly9naXRodWIuY29tL2RhamsvaGx0di1hcGknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGltYWdlQmxvY2sgPSBtYWluVGFibGUuZmluZCgnLnN1bW1hcnlCb2R5c2hvdENvbnRhaW5lcicpO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBpbWFnZUJsb2NrLmNoaWxkcmVuKCdpbWcnKS5lcSgxKS5hdHRyKCdzcmMnKTtcbiAgICAgICAgICAgIGNvbnN0IG1haW5UYWJsZUNvbnRlbnQgPSBtYWluVGFibGUuZmluZCgnLnN1bW1hcnlCcmVha2Rvd25Db250YWluZXInKTtcbiAgICAgICAgICAgIGNvbnN0IG5pY2tuYW1lID0gbWFpblRhYmxlQ29udGVudC5maW5kKCcuc3VtbWFyeU5pY2tuYW1lJykudGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG1haW5UYWJsZUNvbnRlbnQuZmluZCgnLnN1bW1hcnlSZWFsbmFtZScpLnRleHQoKS50cmltKCk7XG4gICAgICAgICAgICBjb25zdCB0ZWFtTmFtZSA9IG1haW5UYWJsZUNvbnRlbnQuZmluZCgnLlN1bW1hcnlUZWFtbmFtZScpLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHRlYW1JZCA9IE51bWJlcigoX2EgPSBtYWluVGFibGVDb250ZW50XG4gICAgICAgICAgICAgICAgLmZpbmQoJy5TdW1tYXJ5VGVhbW5hbWUnKVxuICAgICAgICAgICAgICAgIC5maW5kKCdhJylcbiAgICAgICAgICAgICAgICAuYXR0cignaHJlZicpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3BsaXQoJy8nKVszXSk7XG4gICAgICAgICAgICBjb25zdCBhZ2UgPSBwYXJzZUludChtYWluVGFibGVDb250ZW50LmZpbmQoJy5zdW1tYXJ5UGxheWVyQWdlJykudGV4dCgpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBzdGF0Um93MSA9IG1haW5UYWJsZUNvbnRlbnRcbiAgICAgICAgICAgICAgICAuZmluZCgnLnN1bW1hcnlTdGF0QnJlYWtkb3duUm93JylcbiAgICAgICAgICAgICAgICAuZXEoMClcbiAgICAgICAgICAgICAgICAuZmluZCgnLnN1bW1hcnlTdGF0QnJlYWtkb3duJyk7XG4gICAgICAgICAgICBjb25zdCByYXRpbmcgPSBwYXJzZUZsb2F0KHN0YXRSb3cxLmVxKDApLmZpbmQoJy5zdW1tYXJ5U3RhdEJyZWFrZG93bkRhdGFWYWx1ZScpLnRleHQoKSk7XG4gICAgICAgICAgICBjb25zdCBkcHIgPSBwYXJzZUZsb2F0KHN0YXRSb3cxLmVxKDEpLmZpbmQoJy5zdW1tYXJ5U3RhdEJyZWFrZG93bkRhdGFWYWx1ZScpLnRleHQoKSk7XG4gICAgICAgICAgICBjb25zdCBrYXN0ID0gcGFyc2VGbG9hdChzdGF0Um93MS5lcSgyKS5maW5kKCcuc3VtbWFyeVN0YXRCcmVha2Rvd25EYXRhVmFsdWUnKS50ZXh0KCkpO1xuICAgICAgICAgICAgY29uc3Qgc3RhdFJvdzIgPSBtYWluVGFibGVDb250ZW50XG4gICAgICAgICAgICAgICAgLmZpbmQoJy5zdW1tYXJ5U3RhdEJyZWFrZG93blJvdycpXG4gICAgICAgICAgICAgICAgLmVxKDEpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5zdW1tYXJ5U3RhdEJyZWFrZG93bicpO1xuICAgICAgICAgICAgY29uc3QgaW1wYWN0ID0gcGFyc2VGbG9hdChzdGF0Um93Mi5lcSgwKS5maW5kKCcuc3VtbWFyeVN0YXRCcmVha2Rvd25EYXRhVmFsdWUnKS50ZXh0KCkpO1xuICAgICAgICAgICAgY29uc3QgYXByID0gcGFyc2VGbG9hdChzdGF0Um93Mi5lcSgxKS5maW5kKCcuc3VtbWFyeVN0YXRCcmVha2Rvd25EYXRhVmFsdWUnKS50ZXh0KCkpO1xuICAgICAgICAgICAgY29uc3Qga3ByID0gcGFyc2VGbG9hdChzdGF0Um93Mi5lcSgyKS5maW5kKCcuc3VtbWFyeVN0YXRCcmVha2Rvd25EYXRhVmFsdWUnKS50ZXh0KCkpO1xuICAgICAgICAgICAgY29uc3QgYWRkaXRpb25hbFN0YXRzID0gJCgnLnN0YXRpc3RpY3MgLmNvbHVtbnMgLmNvbCcpO1xuICAgICAgICAgICAgY29uc3QgaGVhZHNob3RzID0gcGFyc2VGbG9hdChhZGRpdGlvbmFsU3RhdHMuZXEoMCkuY2hpbGRyZW4oJy5zdGF0cy1yb3cnKS5lcSgxKS5jaGlsZHJlbignc3BhbicpLmVxKDEpLnRleHQoKSk7XG4gICAgICAgICAgICBjb25zdCBtYXBzID0gcGFyc2VJbnQoYWRkaXRpb25hbFN0YXRzLmVxKDApLmNoaWxkcmVuKCcuc3RhdHMtcm93JykuZXEoNikuY2hpbGRyZW4oJ3NwYW4nKS5lcSgxKS50ZXh0KCksIDEwKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IE51bWJlcihpZCksXG4gICAgICAgICAgICAgICAgdGVhbToge1xuICAgICAgICAgICAgICAgICAgICBpZDogdGVhbUlkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0ZWFtTmFtZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgICAgIG5pY2tuYW1lLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgYWdlOiBhZ2UgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICByYXRpbmcsXG4gICAgICAgICAgICAgICAgaW1wYWN0OiBpbXBhY3QgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICBkcHI6IGRwciB8fCBudWxsLFxuICAgICAgICAgICAgICAgIGFwcjogYXByIHx8IG51bGwsXG4gICAgICAgICAgICAgICAga2FzdDoga2FzdCB8fCBudWxsLFxuICAgICAgICAgICAgICAgIGtwcixcbiAgICAgICAgICAgICAgICBoZWFkc2hvdHMsXG4gICAgICAgICAgICAgICAgbWFwc1BsYXllZDogbWFwcyB8fCBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0UGxheWVyQnlJZCA9IGdldFBsYXllckJ5SWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGF5ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VG9wUGxheWVycyA9IHZvaWQgMDtcbmNvbnN0IGNoZWVyaW9fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2hlZXJpb1wiKSk7XG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGUtZmV0Y2hcIikpO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5mdW5jdGlvbiBnZXRUb3BQbGF5ZXJzKCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke2NvbmZpZ18xLkNPTkZJRy5CQVNFfS8ke2NvbmZpZ18xLkNPTkZJRy5QTEFZRVJTfWA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0geWllbGQgKHlpZWxkIG5vZGVfZmV0Y2hfMS5kZWZhdWx0KHVybCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ1VzZXItQWdlbnQnOiAnbm9kZS1mZXRjaCcgfSxcbiAgICAgICAgICAgIH0pKS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCAkID0gY2hlZXJpb18xLmRlZmF1bHQubG9hZChib2R5LCB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplV2hpdGVzcGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgYWxsQ29udGVudCA9ICQoJy5zdGF0cy10YWJsZS5wbGF5ZXItcmF0aW5ncy10YWJsZSB0Ym9keSB0cicpO1xuICAgICAgICAgICAgY29uc3QgcGxheWVycyA9IFtdO1xuICAgICAgICAgICAgYWxsQ29udGVudC5tYXAoKF9pLCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBlbC5maW5kKCcucGxheWVyQ29sJykuZmluZCgnYScpLmF0dHIoJ2hyZWYnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBbXywgX18sIF9fXywgaWQsIHNsdWddID0gbGluay5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRkID0gZWwuZmluZCgndGQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuaWNrbmFtZSA9IHRkLmVxKDApLnRleHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZWFtID0gdGQuZXEoMSkuZmluZCgnaW1nJykuYXR0cigndGl0bGUnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXBzID0gdGQuZXEoMikudGV4dCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtkID0gdGQuZXEoNSkudGV4dCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGluZyA9IHRkLmVxKDYpLnRleHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHBhcnNlSW50KGlkLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIHRlYW0sXG4gICAgICAgICAgICAgICAgICAgIG5pY2tuYW1lLFxuICAgICAgICAgICAgICAgICAgICBzbHVnLFxuICAgICAgICAgICAgICAgICAgICBtYXBzUGxheWVkOiBwYXJzZUludChtYXBzLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIGtkOiBwYXJzZUZsb2F0KGtkKSxcbiAgICAgICAgICAgICAgICAgICAgcmF0aW5nOiBwYXJzZUZsb2F0KHJhdGluZyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwbGF5ZXJzW3BsYXllcnMubGVuZ3RoXSA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXBsYXllcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBhcmUgbm8gcGxheWVycyBhdmFpbGFibGUsIHNvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgY29udGFjdCB0aGUgbGlicmFyeSBtYWludGFpbmVyIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9kYWprL2hsdHYtYXBpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGxheWVycztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0VG9wUGxheWVycyA9IGdldFRvcFBsYXllcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGF5ZXJzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFJlc3VsdHMgPSB2b2lkIDA7XG5jb25zdCBjaGVlcmlvXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNoZWVyaW9cIikpO1xuY29uc3Qgbm9kZV9mZXRjaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJub2RlLWZldGNoXCIpKTtcbmNvbnN0IGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuZnVuY3Rpb24gZ2V0UmVzdWx0cygpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHtjb25maWdfMS5DT05GSUcuQkFTRX0vJHtjb25maWdfMS5DT05GSUcuUkVTVUxUU31gO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHlpZWxkICh5aWVsZCBub2RlX2ZldGNoXzEuZGVmYXVsdCh1cmwsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdVc2VyLUFnZW50JzogJ25vZGUtZmV0Y2gnIH0sXG4gICAgICAgICAgICB9KSkudGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgJCA9IGNoZWVyaW9fMS5kZWZhdWx0LmxvYWQoYm9keSwge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVdoaXRlc3BhY2U6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdEVsZW1lbnRzID0gJCgnLmFsbHJlcyAucmVzdWx0LWNvbicpO1xuICAgICAgICAgICAgJChyZXN1bHRFbGVtZW50cykuZWFjaCgoX2ksIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9ICQoZWxlbWVudCkuZmluZCgndHInKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBOdW1iZXIoZWwucGFyZW50cygnLnJlc3VsdC1jb24nKS5hdHRyKCdkYXRhLXpvbmVkZ3JvdXBpbmctZW50cnktdW5peCcpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lID0gbmV3IERhdGUodGltZXN0YW1wKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlYW0xRWwgPSBlbC5jaGlsZHJlbignLnRlYW0tY2VsbCcpLmZpcnN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVhbTJFbCA9IGVsLmNoaWxkcmVuKCcudGVhbS1jZWxsJykubGFzdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoSWQgPSAkKGVsZW1lbnQpLmNoaWxkcmVuKCdhJykuYXR0cignaHJlZicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcHMgPSBlbC5maW5kKCcubWFwLXRleHQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQxID0gZWwuZmluZCgnLnJlc3VsdC1zY29yZScpLmNoaWxkcmVuKCdzcGFuJykuZmlyc3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQyID0gZWwuZmluZCgnLnJlc3VsdC1zY29yZScpLmNoaWxkcmVuKCdzcGFuJykubGFzdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlYW0xID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0ZWFtMUVsLmZpbmQoJy50ZWFtJykudGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICBsb2dvOiAoKF9hID0gdGVhbTFFbC5maW5kKCdpbWcnKS5hdHRyKCdzcmMnKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluY2x1ZGVzKCdodHRwczovLycpKSA/IHRlYW0xRWwuZmluZCgnaW1nJykuYXR0cignc3JjJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYCR7Y29uZmlnXzEuQ09ORklHLkJBU0V9JHt0ZWFtMUVsLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycpfWAsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcGFyc2VJbnQocmVzdWx0MS50ZXh0KCksIDEwKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlYW0yID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0ZWFtMkVsLmZpbmQoJy50ZWFtJykudGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICBsb2dvOiAoKF9iID0gdGVhbTJFbC5maW5kKCdpbWcnKS5hdHRyKCdzcmMnKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVzKCdodHRwczovLycpKSA/IHRlYW0yRWwuZmluZCgnaW1nJykuYXR0cignc3JjJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYCR7Y29uZmlnXzEuQ09ORklHLkJBU0V9JHt0ZWFtMkVsLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycpfWAsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcGFyc2VJbnQocmVzdWx0Mi50ZXh0KCksIDEwKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iakRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlbC5maW5kKCcuZXZlbnQtbmFtZScpLnRleHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ286ICgoX2MgPSBlbC5maW5kKCcuZXZlbnQtbG9nbycpLmF0dHIoJ3NyYycpKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuaW5jbHVkZXMoJ2h0dHBzOi8vJykpID8gZWwuZmluZCgnLmV2ZW50LWxvZ28nKS5hdHRyKCdzcmMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYCR7Y29uZmlnXzEuQ09ORklHLkJBU0V9JHtlbC5maW5kKCcuZXZlbnQtbG9nbycpLmF0dHIoJ3NyYycpfWAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1hcHM6IG1hcHMudGV4dCgpLFxuICAgICAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgICAgICB0ZWFtczogW3RlYW0xLCB0ZWFtMl0sXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoSWQ6IHBhcnNlSW50KG1hdGNoSWQuc3BsaXQoJy8nKVsyXSwgMTApLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG9iakRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBhcmUgbm8gcmVzdWx0cyBhdmFpbGFibGUsIHNvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgY29udGFjdCB0aGUgbGlicmFyeSBtYWludGFpbmVyIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9kYWprL2hsdHYtYXBpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0UmVzdWx0cyA9IGdldFJlc3VsdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXN1bHRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGUtZmV0Y2hcIikpO1xuY29uc3QgeG1sMmpzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInhtbDJqc1wiKSk7XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbmZ1bmN0aW9uIHZhbGlkYXRlWE1MKHhtbCkge1xuICAgIHJldHVybiB4bWwuc2xpY2UoMCwgNSkgPT09IGA8P3htbGA7XG59XG5mdW5jdGlvbiBnZXRSU1ModHlwZSkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke2NvbmZpZ18xLkNPTkZJRy5CQVNFfS8ke2NvbmZpZ18xLkNPTkZJRy5SU1N9LyR7dHlwZX1gO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeG1sID0geWllbGQgKHlpZWxkIG5vZGVfZmV0Y2hfMS5kZWZhdWx0KHVybCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ1VzZXItQWdlbnQnOiAnbm9kZS1mZXRjaCcgfSxcbiAgICAgICAgICAgIH0pKS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgeG1sMmpzXzEuZGVmYXVsdC5QYXJzZXIoKTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVYTUwoeG1sKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBYTUwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHBhcnNlci5wYXJzZVN0cmluZ1Byb21pc2UoeG1sKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSByZXN1bHQucnNzLmNoYW5uZWxbMF0uaXRlbTtcbiAgICAgICAgICAgIGNvbnN0IHJzcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHJlc3VsdC5yc3MuY2hhbm5lbFswXS5pdGVtW2ldLnRpdGxlWzBdLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVzdWx0LnJzcy5jaGFubmVsWzBdLml0ZW1baV0uZGVzY3JpcHRpb25bMF0sXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IHJlc3VsdC5yc3MuY2hhbm5lbFswXS5pdGVtW2ldLmxpbmtbMF0sXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG5ldyBEYXRlKHJlc3VsdC5yc3MuY2hhbm5lbFswXS5pdGVtW2ldLnB1YkRhdGVbMF0pLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByc3MucHVzaChvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJzcztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdldFJTUztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJzcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRUZWFtQnlJZCA9IHZvaWQgMDtcbmNvbnN0IGNoZWVyaW9fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2hlZXJpb1wiKSk7XG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGUtZmV0Y2hcIikpO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5mdW5jdGlvbiBnZXRUZWFtQnlJZChpZCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAke2NvbmZpZ18xLkNPTkZJRy5CQVNFfS8ke2NvbmZpZ18xLkNPTkZJRy5URUFNfS8ke2lkfS9fYDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB5aWVsZCAoeWllbGQgbm9kZV9mZXRjaF8xLmRlZmF1bHQodXJsLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnVXNlci1BZ2VudCc6ICdub2RlLWZldGNoJyB9LFxuICAgICAgICAgICAgfSkpLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvXzEuZGVmYXVsdC5sb2FkKGJvZHksIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVXaGl0ZXNwYWNlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0ZWFtUHJvZmlsZSA9ICQoJy50ZWFtUHJvZmlsZScpO1xuICAgICAgICAgICAgaWYgKCF0ZWFtUHJvZmlsZS5odG1sKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIG5vIHRlYW0gYXZhaWxhYmxlLCBzb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIGNvbnRhY3QgdGhlIGxpYnJhcnkgbWFpbnRhaW5lciBvbiBodHRwczovL2dpdGh1Yi5jb20vZGFqay9obHR2LWFwaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbGluZXVwID0gdGVhbVByb2ZpbGUuZmluZCgnLmJvZHlzaG90LXRlYW0nKS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgY29uc3QgcGxheWVycyA9IFtdO1xuICAgICAgICAgICAgbGluZXVwLmVhY2goKF9pLCBwKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWVyID0gJChwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudHJ5TmFtZSA9IHBsYXllci5maW5kKCcuZmxhZycpLmF0dHIoJ3RpdGxlJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY291bnRyeUZsYWcgPSBgJHtjb25maWdfMS5DT05GSUcuQkFTRX0ke3BsYXllci5maW5kKCcuZmxhZycpLmF0dHIoJ3NyYycpfWA7XG4gICAgICAgICAgICAgICAgcGxheWVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IHBsYXllci5maW5kKCdpbWcnKS5hdHRyKCd0aXRsZScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZTogcGxheWVyLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycpLFxuICAgICAgICAgICAgICAgICAgICBuaWNrbmFtZTogcGxheWVyLmF0dHIoJ3RpdGxlJyksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnk6IGNvdW50cnlOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjb3VudHJ5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnOiBjb3VudHJ5RmxhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0ZWFtUHJvZmlsZS5maW5kKCcucHJvZmlsZS10ZWFtLW5hbWUnKS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCBsb2dvID0gdGVhbVByb2ZpbGUuZmluZCgnLnRlYW1sb2dvJykuYXR0cignc3JjJyk7XG4gICAgICAgICAgICBjb25zdCBzdGF0c0NvbnRhaW5lciA9IHRlYW1Qcm9maWxlLmZpbmQoJy5wcm9maWxlLXRlYW0tc3RhdHMtY29udGFpbmVyJykuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIGNvbnN0IHJhbmtpbmcgPSBOdW1iZXIoc3RhdHNDb250YWluZXIuZXEoMCkuZmluZCgnLnJpZ2h0JykudGV4dCgpLnJlcGxhY2UoJyMnLCAnJykpO1xuICAgICAgICAgICAgY29uc3QgYXZlcmFnZVBsYXllckFnZSA9IE51bWJlcihzdGF0c0NvbnRhaW5lci5lcSgyKS5maW5kKCcucmlnaHQnKS50ZXh0KCkpO1xuICAgICAgICAgICAgY29uc3QgY29hY2ggPSBzdGF0c0NvbnRhaW5lci5lcSgzKS5maW5kKCcucmlnaHQnKS50ZXh0KCkudHJpbSgpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGxvZ28sXG4gICAgICAgICAgICAgICAgcmFua2luZyxcbiAgICAgICAgICAgICAgICBjb2FjaCxcbiAgICAgICAgICAgICAgICBhdmVyYWdlUGxheWVyQWdlLFxuICAgICAgICAgICAgICAgIHBsYXllcnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRUZWFtQnlJZCA9IGdldFRlYW1CeUlkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVhbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRUb3BUZWFtcyA9IHZvaWQgMDtcbmNvbnN0IGNoZWVyaW9fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2hlZXJpb1wiKSk7XG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGUtZmV0Y2hcIikpO1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5mdW5jdGlvbiBnZXRUb3BUZWFtcygpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHtjb25maWdfMS5DT05GSUcuQkFTRX0vJHtjb25maWdfMS5DT05GSUcuVEVBTVN9YDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB5aWVsZCAoeWllbGQgbm9kZV9mZXRjaF8xLmRlZmF1bHQodXJsLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnVXNlci1BZ2VudCc6ICdub2RlLWZldGNoJyB9LFxuICAgICAgICAgICAgfSkpLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvXzEuZGVmYXVsdC5sb2FkKGJvZHksIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVXaGl0ZXNwYWNlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBhbGxDb250ZW50ID0gJCgnLnJhbmtlZC10ZWFtJyk7XG4gICAgICAgICAgICBjb25zdCB0ZWFtcyA9IFtdO1xuICAgICAgICAgICAgYWxsQ29udGVudC5tYXAoKF9pLCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gTnVtYmVyKGVsLmZpbmQoJy5tb3JlTGluaycpLmF0dHIoJ2hyZWYnKS5zcGxpdCgnLycpWzJdKTtcbiAgICAgICAgICAgICAgICBjb25zdCByYW5raW5nID0gcGFyc2VJbnQoZWwuZmluZCgnLnBvc2l0aW9uJykudGV4dCgpLnJlcGxhY2UoJyMnLCAnJyksIDEwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2dvID0gZWwuZmluZCgnLnRlYW0tbG9nbycpLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBlbC5maW5kKCcudGVhbUxpbmUnKS5maW5kKCcubmFtZScpLnRleHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJzID0gW107XG4gICAgICAgICAgICAgICAgZWwuZmluZCgnLmxpbmV1cCcpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgICAgIC5lYWNoKChfX2ksIHApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyID0gJChwKS5maW5kKCdhJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpYyA9IHBsYXllci5maW5kKCcucGxheWVyUGljdHVyZScpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuaWNrID0gcGxheWVyLmZpbmQoJy5uaWNrJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50cnkgPSBuaWNrLmZpbmQoJ2ltZycpO1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IHBpYy5hdHRyKCd0aXRsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IHBpYy5hdHRyKCdzcmMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5pY2tuYW1lOiBuaWNrLnRleHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjb3VudHJ5LmF0dHIoJ3RpdGxlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhZzogYCR7Y29uZmlnXzEuQ09ORklHLkJBU0V9JHtjb3VudHJ5LmF0dHIoJ3NyYycpfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIHJhbmtpbmcsXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxvZ28sXG4gICAgICAgICAgICAgICAgICAgIHBsYXllcnMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0ZWFtc1t0ZWFtcy5sZW5ndGhdID0gcmVzcG9uc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghdGVhbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBhcmUgbm8gdGVhbXMgYXZhaWxhYmxlLCBzb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIGNvbnRhY3QgdGhlIGxpYnJhcnkgbWFpbnRhaW5lciBvbiBodHRwczovL2dpdGh1Yi5jb20vZGFqay9obHR2LWFwaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRlYW1zO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRUb3BUZWFtcyA9IGdldFRvcFRlYW1zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVhbXMuanMubWFwIl19
